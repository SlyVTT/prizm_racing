#include "display.h"
#include "rasterizer.h"
#include "time.h"
#include "util.h"
#include "input.h"
#include "mat4.h"
#include "rmath.h"
#include "math.h"

mat4 view;
vec3f carPos = {0, 0, 0};
vec3f cameraPos = {0, 0, 0};
vec3f carSpeed = {0, 0, 0};
float carDirection = 0;
float carAngle = 0;
float cameraAngle = 0;
float wheelSpeed = 0;

vec3d vertexShader(vec3d i, void *uniforms){
	if(uniforms == nullptr)
		return view * i;
	mat4 model = *((mat4*)uniforms);
	return view * model * i;
}

Color fragmentShader(Color i, void *uniforms){
	return i;
}

int main(){
	fp st[SIN_SAMPLES];
	sinTable = st;
	createSinTable();

	Display::init();
	Display::clear(newColor(0, 0, 0));
	Display::show();

	Time::update();

	Input::init();

	fp depthBuffer[RENDER_WIDTH*RENDER_HEIGHT];
	Rasterizer::depthBuffer = depthBuffer;

	Triangle carTriangles[134] = {
		{
			{0.794, 0.294, -0.380},
			{-0.535, 0.294, -0.000},
			{-0.535, 0.294, -0.443},
			newColor(203, 2, 1)},
		{
			{0.794, 0.294, -0.380},
			{1.345, 0.294, -0.000},
			{0.794, 0.294, -0.000},
			newColor(203, 2, 1)},
		{
			{1.345, 0.294, -0.380},
			{1.795, 0.294, -0.605},
			{1.886, 0.294, -0.000},
			newColor(203, 2, 1)},
		{
			{-0.535, 0.294, -0.000},
			{-1.188, 0.263, -0.431},
			{-0.535, 0.294, -0.443},
			newColor(203, 2, 1)},
		{
			{-1.399, 0.128, -0.681},
			{-1.188, 0.227, -0.719},
			{-1.188, 0.263, -0.431},
			newColor(203, 2, 1)},
		{
			{1.795, 0.294, -0.605},
			{1.886, 0.003, -0.000},
			{1.886, 0.294, -0.000},
			newColor(203, 2, 1)},
		{
			{1.795, 0.003, -0.605},
			{0.985, -0.225, -0.000},
			{1.886, 0.003, -0.000},
			newColor(203, 2, 1)},
		{
			{0.743, -0.212, -0.546},
			{0.302, -0.435, -0.000},
			{0.985, -0.225, -0.000},
			newColor(85, 163, 202)},
		{
			{-0.474, -0.239, -0.525},
			{0.302, -0.424, -0.389},
			{0.743, -0.212, -0.546},
			newColor(203, 2, 1)},
		{
			{0.302, -0.435, -0.000},
			{-0.474, -0.415, -0.387},
			{-0.559, -0.455, -0.000},
			newColor(203, 2, 1)},
		{
			{-0.559, -0.240, -0.325},
			{-1.287, -0.240, -0.394},
			{-0.474, -0.415, -0.387},
			newColor(203, 2, 1)},
		{
			{-0.559, -0.240, -0.325},
			{-0.559, -0.455, -0.000},
			{-0.559, -0.240, -0.000},
			newColor(203, 2, 1)},
		{
			{-0.474, -0.415, -0.387},
			{-0.474, -0.239, -0.525},
			{-1.287, -0.240, -0.394},
			newColor(203, 2, 1)},
		{
			{-1.282, -0.240, -0.000},
			{-0.559, -0.240, -0.325},
			{-0.559, -0.240, -0.000},
			newColor(0, 0, 0)},
		{
			{-0.489, -0.177, -0.683},
			{0.743, -0.212, -0.546},
			{0.756, -0.055, -0.687},
			newColor(203, 2, 1)},
		{
			{1.345, 0.294, -0.380},
			{0.868, -0.070, -0.380},
			{1.283, -0.062, -0.380},
			newColor(0, 0, 0)},
		{
			{-0.535, 0.294, -0.674},
			{0.756, -0.055, -0.687},
			{0.794, 0.294, -0.674},
			newColor(203, 2, 1)},
		{
			{-1.287, -0.240, -0.394},
			{-0.489, -0.177, -0.683},
			{-1.385, -0.217, -0.739},
			newColor(203, 2, 1)},
		{
			{-1.287, -0.240, -0.394},
			{-1.441, -0.240, -0.000},
			{-1.282, -0.240, -0.000},
			newColor(203, 2, 1)},
		{
			{-1.441, -0.240, -0.000},
			{-1.399, 0.128, -0.681},
			{-1.399, 0.134, 0.012},
			newColor(203, 2, 1)},
		{
			{-1.036, -0.065, -0.431},
			{-1.188, 0.227, -0.719},
			{-1.036, -0.065, -0.719},
			newColor(0, 0, 0)},
		{
			{-1.036, -0.065, -0.431},
			{-0.605, -0.065, -0.697},
			{-0.605, -0.065, -0.443},
			newColor(0, 0, 0)},
		{
			{-0.535, 0.294, -0.443},
			{-1.036, -0.065, -0.431},
			{-0.605, -0.065, -0.443},
			newColor(0, 0, 0)},
		{
			{-0.605, -0.065, -0.443},
			{-0.535, 0.294, -0.674},
			{-0.535, 0.294, -0.443},
			newColor(0, 0, 0)},
		{
			{-0.489, -0.177, -0.683},
			{-0.535, 0.294, -0.674},
			{-0.605, -0.065, -0.697},
			newColor(203, 2, 1)},
		{
			{-0.489, -0.177, -0.683},
			{-1.036, -0.065, -0.719},
			{-1.385, -0.217, -0.739},
			newColor(203, 2, 1)},
		{
			{-1.399, 0.128, -0.681},
			{-1.036, -0.065, -0.719},
			{-1.188, 0.227, -0.719},
			newColor(203, 2, 1)},
		{
			{1.283, -0.062, -0.380},
			{1.345, 0.294, -0.711},
			{1.345, 0.294, -0.380},
			newColor(0, 0, 0)},
		{
			{0.794, 0.294, -0.674},
			{0.868, -0.070, -0.380},
			{0.794, 0.294, -0.380},
			newColor(0, 0, 0)},
		{
			{0.868, -0.070, -0.711},
			{0.794, 0.294, -0.674},
			{0.756, -0.055, -0.687},
			newColor(203, 2, 1)},
		{
			{0.756, -0.055, -0.687},
			{0.743, -0.212, -0.546},
			{0.868, -0.070, -0.711},
			newColor(203, 2, 1)},
		{
			{1.345, 0.294, -0.711},
			{1.795, 0.003, -0.605},
			{1.795, 0.294, -0.605},
			newColor(203, 2, 1)},
		{
			{0.868, -0.070, -0.711},
			{0.743, -0.212, -0.546},
			{1.283, -0.062, -0.711},
			newColor(203, 2, 1)},
		{
			{0.743, -0.212, -0.546},
			{1.795, 0.003, -0.605},
			{1.283, -0.062, -0.711},
			newColor(203, 2, 1)},
		{
			{1.283, -0.062, -0.380},
			{0.868, -0.070, -0.711},
			{1.283, -0.062, -0.711},
			newColor(0, 0, 0)},
		{
			{0.794, 0.294, 0.380},
			{0.794, 0.294, 0.674},
			{-0.535, 0.294, 0.443},
			newColor(203, 2, 1)},
		{
			{1.345, 0.294, -0.000},
			{0.794, 0.294, 0.380},
			{0.794, 0.294, -0.000},
			newColor(203, 2, 1)},
		{
			{1.795, 0.294, 0.605},
			{1.345, 0.294, 0.711},
			{1.345, 0.294, 0.380},
			newColor(203, 2, 1)},
		{
			{-1.188, 0.263, 0.431},
			{-0.535, 0.294, -0.000},
			{-0.535, 0.294, 0.443},
			newColor(203, 2, 1)},
		{
			{-1.188, 0.263, 0.431},
			{-1.188, 0.227, 0.719},
			{-1.399, 0.128, 0.681},
			newColor(203, 2, 1)},
		{
			{1.886, 0.003, -0.000},
			{1.795, 0.294, 0.605},
			{1.886, 0.294, -0.000},
			newColor(203, 2, 1)},
		{
			{0.985, -0.225, -0.000},
			{1.795, 0.003, 0.605},
			{1.886, 0.003, -0.000},
			newColor(203, 2, 1)},
		{
			{0.302, -0.435, -0.000},
			{0.743, -0.212, 0.546},
			{0.985, -0.225, -0.000},
			newColor(85, 163, 202)},
		{
			{-0.474, -0.239, 0.525},
			{0.302, -0.424, 0.389},
			{-0.474, -0.415, 0.387},
			newColor(203, 2, 1)},
		{
			{0.302, -0.435, -0.000},
			{-0.474, -0.415, 0.387},
			{0.302, -0.424, 0.389},
			newColor(203, 2, 1)},
		{
			{-0.559, -0.240, 0.325},
			{-0.474, -0.415, 0.387},
			{-1.287, -0.240, 0.394},
			newColor(203, 2, 1)},
		{
			{-0.559, -0.455, -0.000},
			{-0.559, -0.240, 0.325},
			{-0.559, -0.240, -0.000},
			newColor(203, 2, 1)},
		{
			{-0.474, -0.415, 0.387},
			{-1.287, -0.240, 0.394},
			{-0.474, -0.239, 0.525},
			newColor(203, 2, 1)},
		{
			{-1.282, -0.240, -0.000},
			{-0.559, -0.240, 0.325},
			{-1.287, -0.240, 0.394},
			newColor(0, 0, 0)},
		{
			{0.743, -0.212, 0.546},
			{-0.489, -0.177, 0.683},
			{0.756, -0.055, 0.687},
			newColor(203, 2, 1)},
		{
			{1.345, 0.294, 0.380},
			{0.868, -0.070, 0.380},
			{0.794, 0.294, 0.380},
			newColor(0, 0, 0)},
		{
			{0.756, -0.055, 0.687},
			{-0.535, 0.294, 0.674},
			{0.794, 0.294, 0.674},
			newColor(203, 2, 1)},
		{
			{-1.287, -0.240, 0.394},
			{-0.489, -0.177, 0.683},
			{-0.474, -0.239, 0.525},
			newColor(203, 2, 1)},
		{
			{-1.441, -0.240, -0.000},
			{-1.287, -0.240, 0.394},
			{-1.282, -0.240, -0.000},
			newColor(203, 2, 1)},
		{
			{-1.399, 0.128, 0.681},
			{-1.441, -0.240, -0.000},
			{-1.399, 0.134, -0.012},
			newColor(203, 2, 1)},
		{
			{-1.036, -0.065, 0.431},
			{-1.188, 0.227, 0.719},
			{-1.188, 0.263, 0.431},
			newColor(0, 0, 0)},
		{
			{-1.036, -0.065, 0.431},
			{-0.605, -0.065, 0.697},
			{-1.036, -0.065, 0.719},
			newColor(0, 0, 0)},
		{
			{-0.535, 0.294, 0.443},
			{-1.036, -0.065, 0.431},
			{-1.188, 0.263, 0.431},
			newColor(0, 0, 0)},
		{
			{-0.535, 0.294, 0.674},
			{-0.605, -0.065, 0.443},
			{-0.535, 0.294, 0.443},
			newColor(0, 0, 0)},
		{
			{-0.489, -0.177, 0.683},
			{-0.605, -0.065, 0.697},
			{-0.535, 0.294, 0.674},
			newColor(203, 2, 1)},
		{
			{-1.036, -0.065, 0.719},
			{-0.489, -0.177, 0.683},
			{-1.385, -0.217, 0.739},
			newColor(203, 2, 1)},
		{
			{-1.036, -0.065, 0.719},
			{-1.399, 0.128, 0.681},
			{-1.188, 0.227, 0.719},
			newColor(203, 2, 1)},
		{
			{1.345, 0.294, 0.711},
			{1.283, -0.062, 0.380},
			{1.345, 0.294, 0.380},
			newColor(0, 0, 0)},
		{
			{0.868, -0.070, 0.380},
			{0.794, 0.294, 0.674},
			{0.794, 0.294, 0.380},
			newColor(0, 0, 0)},
		{
			{0.868, -0.070, 0.711},
			{0.756, -0.055, 0.687},
			{0.794, 0.294, 0.674},
			newColor(203, 2, 1)},
		{
			{0.756, -0.055, 0.687},
			{0.868, -0.070, 0.711},
			{0.743, -0.212, 0.546},
			newColor(203, 2, 1)},
		{
			{1.345, 0.294, 0.711},
			{1.795, 0.003, 0.605},
			{1.283, -0.062, 0.711},
			newColor(203, 2, 1)},
		{
			{0.868, -0.070, 0.711},
			{1.283, -0.062, 0.711},
			{0.743, -0.212, 0.546},
			newColor(203, 2, 1)},
		{
			{0.743, -0.212, 0.546},
			{1.283, -0.062, 0.711},
			{1.795, 0.003, 0.605},
			newColor(203, 2, 1)},
		{
			{0.868, -0.070, 0.711},
			{1.283, -0.062, 0.380},
			{1.283, -0.062, 0.711},
			newColor(0, 0, 0)},
		{
			{-0.535, 0.294, -0.443},
			{-0.535, 0.294, -0.674},
			{0.794, 0.294, -0.674},
			newColor(203, 2, 1)},
		{
			{0.794, 0.294, -0.380},
			{0.794, 0.294, -0.000},
			{-0.535, 0.294, -0.000},
			newColor(203, 2, 1)},
		{
			{-0.535, 0.294, -0.443},
			{0.794, 0.294, -0.674},
			{0.794, 0.294, -0.380},
			newColor(203, 2, 1)},
		{
			{0.794, 0.294, -0.380},
			{1.345, 0.294, -0.380},
			{1.345, 0.294, -0.000},
			newColor(203, 2, 1)},
		{
			{1.886, 0.294, -0.000},
			{1.345, 0.294, -0.000},
			{1.345, 0.294, -0.380},
			newColor(203, 2, 1)},
		{
			{1.345, 0.294, -0.380},
			{1.345, 0.294, -0.711},
			{1.795, 0.294, -0.605},
			newColor(203, 2, 1)},
		{
			{-0.535, 0.294, -0.000},
			{-1.188, 0.263, 0.012},
			{-1.188, 0.263, -0.431},
			newColor(203, 2, 1)},
		{
			{-1.188, 0.263, 0.012},
			{-1.399, 0.134, 0.012},
			{-1.188, 0.263, -0.431},
			newColor(203, 2, 1)},
		{
			{-1.399, 0.134, 0.012},
			{-1.399, 0.128, -0.681},
			{-1.188, 0.263, -0.431},
			newColor(203, 2, 1)},
		{
			{1.795, 0.294, -0.605},
			{1.795, 0.003, -0.605},
			{1.886, 0.003, -0.000},
			newColor(203, 2, 1)},
		{
			{1.795, 0.003, -0.605},
			{0.743, -0.212, -0.546},
			{0.985, -0.225, -0.000},
			newColor(203, 2, 1)},
		{
			{0.743, -0.212, -0.546},
			{0.302, -0.424, -0.389},
			{0.302, -0.435, -0.000},
			newColor(85, 163, 202)},
		{
			{-0.474, -0.239, -0.525},
			{-0.474, -0.415, -0.387},
			{0.302, -0.424, -0.389},
			newColor(203, 2, 1)},
		{
			{0.302, -0.435, -0.000},
			{0.302, -0.424, -0.389},
			{-0.474, -0.415, -0.387},
			newColor(203, 2, 1)},
		{
			{-0.559, -0.240, -0.325},
			{-0.474, -0.415, -0.387},
			{-0.559, -0.455, -0.000},
			newColor(203, 2, 1)},
		{
			{-1.282, -0.240, -0.000},
			{-1.287, -0.240, -0.394},
			{-0.559, -0.240, -0.325},
			newColor(0, 0, 0)},
		{
			{-0.489, -0.177, -0.683},
			{-0.474, -0.239, -0.525},
			{0.743, -0.212, -0.546},
			newColor(203, 2, 1)},
		{
			{1.345, 0.294, -0.380},
			{0.794, 0.294, -0.380},
			{0.868, -0.070, -0.380},
			newColor(0, 0, 0)},
		{
			{-0.535, 0.294, -0.674},
			{-0.489, -0.177, -0.683},
			{0.756, -0.055, -0.687},
			newColor(203, 2, 1)},
		{
			{-1.287, -0.240, -0.394},
			{-0.474, -0.239, -0.525},
			{-0.489, -0.177, -0.683},
			newColor(203, 2, 1)},
		{
			{-1.287, -0.240, -0.394},
			{-1.385, -0.217, -0.739},
			{-1.441, -0.240, -0.000},
			newColor(203, 2, 1)},
		{
			{-1.441, -0.240, -0.000},
			{-1.385, -0.217, -0.739},
			{-1.399, 0.128, -0.681},
			newColor(203, 2, 1)},
		{
			{-1.036, -0.065, -0.431},
			{-1.188, 0.263, -0.431},
			{-1.188, 0.227, -0.719},
			newColor(0, 0, 0)},
		{
			{-1.036, -0.065, -0.431},
			{-1.036, -0.065, -0.719},
			{-0.605, -0.065, -0.697},
			newColor(0, 0, 0)},
		{
			{-0.535, 0.294, -0.443},
			{-1.188, 0.263, -0.431},
			{-1.036, -0.065, -0.431},
			newColor(0, 0, 0)},
		{
			{-0.605, -0.065, -0.443},
			{-0.605, -0.065, -0.697},
			{-0.535, 0.294, -0.674},
			newColor(0, 0, 0)},
		{
			{-0.489, -0.177, -0.683},
			{-0.605, -0.065, -0.697},
			{-1.036, -0.065, -0.719},
			newColor(203, 2, 1)},
		{
			{-1.399, 0.128, -0.681},
			{-1.385, -0.217, -0.739},
			{-1.036, -0.065, -0.719},
			newColor(203, 2, 1)},
		{
			{1.283, -0.062, -0.380},
			{1.283, -0.062, -0.711},
			{1.345, 0.294, -0.711},
			newColor(0, 0, 0)},
		{
			{0.794, 0.294, -0.674},
			{0.868, -0.070, -0.711},
			{0.868, -0.070, -0.380},
			newColor(0, 0, 0)},
		{
			{1.345, 0.294, -0.711},
			{1.283, -0.062, -0.711},
			{1.795, 0.003, -0.605},
			newColor(203, 2, 1)},
		{
			{1.283, -0.062, -0.380},
			{0.868, -0.070, -0.380},
			{0.868, -0.070, -0.711},
			newColor(0, 0, 0)},
		{
			{0.794, 0.294, 0.674},
			{-0.535, 0.294, 0.674},
			{-0.535, 0.294, 0.443},
			newColor(203, 2, 1)},
		{
			{-0.535, 0.294, 0.443},
			{-0.535, 0.294, -0.000},
			{0.794, 0.294, 0.380},
			newColor(203, 2, 1)},
		{
			{-0.535, 0.294, -0.000},
			{0.794, 0.294, -0.000},
			{0.794, 0.294, 0.380},
			newColor(203, 2, 1)},
		{
			{1.345, 0.294, -0.000},
			{1.345, 0.294, 0.380},
			{0.794, 0.294, 0.380},
			newColor(203, 2, 1)},
		{
			{1.345, 0.294, 0.380},
			{1.345, 0.294, -0.000},
			{1.886, 0.294, -0.000},
			newColor(203, 2, 1)},
		{
			{1.886, 0.294, -0.000},
			{1.795, 0.294, 0.605},
			{1.345, 0.294, 0.380},
			newColor(203, 2, 1)},
		{
			{-1.188, 0.263, 0.431},
			{-1.188, 0.263, -0.012},
			{-0.535, 0.294, -0.000},
			newColor(203, 2, 1)},
		{
			{-1.399, 0.128, 0.681},
			{-1.399, 0.134, -0.012},
			{-1.188, 0.263, 0.431},
			newColor(203, 2, 1)},
		{
			{-1.399, 0.134, -0.012},
			{-1.188, 0.263, -0.012},
			{-1.188, 0.263, 0.431},
			newColor(203, 2, 1)},
		{
			{1.886, 0.003, -0.000},
			{1.795, 0.003, 0.605},
			{1.795, 0.294, 0.605},
			newColor(203, 2, 1)},
		{
			{0.985, -0.225, -0.000},
			{0.743, -0.212, 0.546},
			{1.795, 0.003, 0.605},
			newColor(203, 2, 1)},
		{
			{0.302, -0.435, -0.000},
			{0.302, -0.424, 0.389},
			{0.743, -0.212, 0.546},
			newColor(85, 163, 202)},
		{
			{-0.474, -0.239, 0.525},
			{0.743, -0.212, 0.546},
			{0.302, -0.424, 0.389},
			newColor(203, 2, 1)},
		{
			{0.302, -0.435, -0.000},
			{-0.559, -0.455, -0.000},
			{-0.474, -0.415, 0.387},
			newColor(203, 2, 1)},
		{
			{-0.559, -0.455, -0.000},
			{-0.474, -0.415, 0.387},
			{-0.559, -0.240, 0.325},
			newColor(203, 2, 1)},
		{
			{-1.282, -0.240, -0.000},
			{-0.559, -0.240, -0.000},
			{-0.559, -0.240, 0.325},
			newColor(0, 0, 0)},
		{
			{0.743, -0.212, 0.546},
			{-0.474, -0.239, 0.525},
			{-0.489, -0.177, 0.683},
			newColor(203, 2, 1)},
		{
			{1.345, 0.294, 0.380},
			{1.283, -0.062, 0.380},
			{0.868, -0.070, 0.380},
			newColor(0, 0, 0)},
		{
			{0.756, -0.055, 0.687},
			{-0.489, -0.177, 0.683},
			{-0.535, 0.294, 0.674},
			newColor(203, 2, 1)},
		{
			{-1.287, -0.240, 0.394},
			{-1.385, -0.217, 0.739},
			{-0.489, -0.177, 0.683},
			newColor(203, 2, 1)},
		{
			{-1.441, -0.240, -0.000},
			{-1.385, -0.217, 0.739},
			{-1.287, -0.240, 0.394},
			newColor(203, 2, 1)},
		{
			{-1.399, 0.128, 0.681},
			{-1.385, -0.217, 0.739},
			{-1.441, -0.240, -0.000},
			newColor(203, 2, 1)},
		{
			{-1.036, -0.065, 0.431},
			{-1.036, -0.065, 0.719},
			{-1.188, 0.227, 0.719},
			newColor(0, 0, 0)},
		{
			{-1.036, -0.065, 0.431},
			{-0.605, -0.065, 0.443},
			{-0.605, -0.065, 0.697},
			newColor(0, 0, 0)},
		{
			{-0.535, 0.294, 0.443},
			{-0.605, -0.065, 0.443},
			{-1.036, -0.065, 0.431},
			newColor(0, 0, 0)},
		{
			{-0.535, 0.294, 0.674},
			{-0.605, -0.065, 0.697},
			{-0.605, -0.065, 0.443},
			newColor(0, 0, 0)},
		{
			{-1.036, -0.065, 0.719},
			{-0.605, -0.065, 0.697},
			{-0.489, -0.177, 0.683},
			newColor(203, 2, 1)},
		{
			{-1.036, -0.065, 0.719},
			{-1.385, -0.217, 0.739},
			{-1.399, 0.128, 0.681},
			newColor(203, 2, 1)},
		{
			{1.345, 0.294, 0.711},
			{1.283, -0.062, 0.711},
			{1.283, -0.062, 0.380},
			newColor(0, 0, 0)},
		{
			{0.868, -0.070, 0.380},
			{0.868, -0.070, 0.711},
			{0.794, 0.294, 0.674},
			newColor(0, 0, 0)},
		{
			{1.345, 0.294, 0.711},
			{1.795, 0.294, 0.605},
			{1.795, 0.003, 0.605},
			newColor(203, 2, 1)},
		{
			{0.868, -0.070, 0.711},
			{0.868, -0.070, 0.380},
			{1.283, -0.062, 0.380},
			newColor(0, 0, 0)},
	};

	Mesh carMesh = {
		134,
		carTriangles
	};

	srand(0);

	// Triangle treeTriangles[10*10];
	// for(int x = 0; x < 10; x++){
	// 	for(int y = 0; y < 10; y++){
	// 		// int treeX = (x-50)*10;
	// 		// int treeY = (y-50)*10;
	// 		int treeX = ((rand()%100) - 50)*10;
	// 		int treeY = ((rand()%100) - 50)*10;
	// 		treeTriangles[x+y*10] = {
	// 			{treeX-1, 0, treeY},
	// 			{treeX, -1, treeY},
	// 			{treeX+1, 0, treeY},
	// 			newColor(0, 255, 0)
	// 		};
	// 	}
	// }
	// Mesh treeMesh = {
	// 	10*10,
	// 	treeTriangles
	// };

#define TRACK_SEGMENTS 25
#define TRACK_WIDTH 10
	vec3d trackPoints[TRACK_SEGMENTS+1] = {
		{0, 0, 0},
		{2, 0, 0},
		{4, 0, 0},
		{6, 0, 0},
		{8, 0, 0},
		{10, 0, 0},
		{12, 0, 1},
		{13, 0, 3},
		{13, 0, 5},
		{12, 0, 7},
		{10, 0, 9},
		{8, 0, 10},
		{6, 0, 10},
		{4, 0, 10},
		{2, 0, 10},
		{0, 0, 10},
		{-2, 0, 10},
		{-4, 0, 10},
		{-6, 0, 10},
		{-8, 0, 10},
		{-10, 0, 10},
		{-12, 0, 10},
		{-14, 0, 10},
		{-16, 0, 10},
		{-18, 0, 10},
		{-20, 0, 10},
	};

	for(int i = 0; i < TRACK_SEGMENTS+1; i++){
		trackPoints[i] = trackPoints[i] * 0.5;
	}

	Triangle trackTriangles[TRACK_SEGMENTS*2];

	for(int i = 0; i < TRACK_SEGMENTS; i++){
		vec3d pos = trackPoints[i] * fp(10);
		vec3d nextPos = trackPoints[i+1] * fp(10);
		
		vec3d direction = nextPos - pos;
		vec3d perpendicular = {direction.z, 0, fp(0)-direction.x};
		direction = direction * TRACK_WIDTH;

		perpendicular = perpendicular * fp_isqrt(perpendicular.x*perpendicular.x + perpendicular.y*perpendicular.y + perpendicular.z*perpendicular.z);
		perpendicular = perpendicular * fp(TRACK_WIDTH);

		trackTriangles[i] = {
			pos - perpendicular,
			nextPos - perpendicular,
			nextPos + perpendicular,
			newColor(50, 50, 50)
		};
		trackTriangles[TRACK_SEGMENTS+i] = {
			pos + perpendicular,
			nextPos + perpendicular,
			pos - perpendicular,
			newColor(50, 50, 50)
		};
	}

	// for(int i = 0; i < TRACK_SEGMENTS; i++){
	// 	fp angle = fp(i) * fp(2*PI) / fp(TRACK_SEGMENTS);
	// 	fp nextAngle = fp(i+1) * fp(2*PI) / fp(TRACK_SEGMENTS);
	// 	trackTriangles[i] = {
	// 		{fp_cos(angle)*fp(4), 0, fp_sin(angle)*fp(4)},
	// 		{fp_cos(angle)*fp(5), 0, fp_sin(angle)*fp(5)},
	// 		{fp_cos(nextAngle)*fp(4), 0, fp_sin(nextAngle)*fp(4)},
	// 		newColor(0, 0, 0)
	// 	};
	// 	trackTriangles[i].p0 = trackTriangles[i].p0 * fp(10);
	// 	trackTriangles[i].p1 = trackTriangles[i].p1 * fp(10);
	// 	trackTriangles[i].p2 = trackTriangles[i].p2 * fp(10);
	// 	trackTriangles[i+TRACK_SEGMENTS] = {
	// 		{fp_cos(angle)*fp(5), 0, fp_sin(angle)*fp(5)},
	// 		{fp_cos(nextAngle)*fp(4), 0, fp_sin(nextAngle)*fp(4)},
	// 		{fp_cos(nextAngle)*fp(5), 0, fp_sin(nextAngle)*fp(5)},
	// 		newColor(255, 255, 255)
	// 	};
	// 	trackTriangles[i+TRACK_SEGMENTS].p0 = trackTriangles[i+TRACK_SEGMENTS].p0 * fp(10);
	// 	trackTriangles[i+TRACK_SEGMENTS].p1 = trackTriangles[i+TRACK_SEGMENTS].p1 * fp(10);
	// 	trackTriangles[i+TRACK_SEGMENTS].p2 = trackTriangles[i+TRACK_SEGMENTS].p2 * fp(10);
	// }
	
	// Model trees = {
	// 	.mesh = treeMesh,
	// 	.shader = {
	// 		.vertexShader = vertexShader,
	// 		.fragmentShader = fragmentShader,
	// 		.uniforms = nullptr
	// 	}
	// };
	Model track = {
		.mesh = {
			TRACK_SEGMENTS*2,
			trackTriangles
		},
		.shader = {
			.vertexShader = vertexShader,
			.fragmentShader = fragmentShader,
			.uniforms = nullptr
		}
	};

	mat4 carMatrix;

	Model car = {
		.mesh = carMesh,
		.shader = {
			.vertexShader = vertexShader,
			.fragmentShader = fragmentShader,
			.uniforms = &carMatrix
		}
	};

	Rasterizer::init();
	while(true){
		Rasterizer::reset();

		Time::update();
		Input::update();

		if(Input::keyPressed(KEY_MENU)){
			return 0;
		}

		if(Input::keyDown(KEY_RIGHT) || Input::keyDown(KEY_6)){
			carDirection = carDirection + Time::delta / 40.0f;
		}
		if(Input::keyDown(KEY_LEFT) || Input::keyDown(KEY_4)){
			carDirection = carDirection - Time::delta / 40.0f;
		}

		if(Input::keyDown(KEY_UP) || Input::keyDown(KEY_8)){
			wheelSpeed = wheelSpeed + Time::delta / 200.0f;
		}
		if(Input::keyDown(KEY_DOWN) || Input::keyDown(KEY_5)){
			wheelSpeed = wheelSpeed - Time::delta / 200.0f;
		}

		wheelSpeed = wheelSpeed - (wheelSpeed * 0.001f) * Time::delta;
		if(wheelSpeed > 1)
			wheelSpeed = 1;
		if(wheelSpeed < 0)
			wheelSpeed = 0;

		carSpeed.x = carSpeed.x + wheelSpeed * float(fp_cos(fp(carAngle))) * Time::delta / 150.0f;
		carSpeed.z = carSpeed.z + wheelSpeed * float(fp_sin(fp(0)-fp(carAngle))) * Time::delta / 150.0f;
		carSpeed.x = carSpeed.x - (carSpeed.x * 0.01f) * Time::delta;
		carSpeed.z = carSpeed.z - (carSpeed.z * 0.01f) * Time::delta;

		cameraAngle = cameraAngle + (-cameraAngle * 0.02 + 0.02 * carDirection) * Time::delta;
		carAngle = carAngle + (-carAngle * 0.05 + 0.05 * carDirection) * Time::delta;
		// carAngle = carDirection;
		carPos.x = carPos.x + carSpeed.x * Time::delta;
		carPos.z = carPos.z + carSpeed.z * Time::delta;
		// vec3f zero = {0,0,0};
		// cameraPos = cameraPos + (zero - cameraPos * 0.2f + carPos * 0.2f) * Time::delta;
		cameraPos = carPos;

		Display::clear(newColor(70, 180, 220));

		carMatrix = mat4();
		carMatrix = mat4::translate(carMatrix, carPos.x, -0.5, carPos.z);
		carMatrix = mat4::rotateY(carMatrix, carAngle);

		view = mat4();
		view = mat4::rotateX(view, HALF_PI*0.1);
		view = mat4::translate(view, 0, 2, 6);
		view = mat4::rotateY(view, -cameraAngle - HALF_PI);
		view = mat4::translate(view, -cameraPos.x, 0, -cameraPos.z);

		// Rasterizer::drawModel(trees, false);
		// Rasterizer::drawTriangle(trees.mesh.triangles[51+51*100], trees.shader, false);
		Rasterizer::drawModel(track, false);
		Rasterizer::drawModel(car, true);

		char buffer[10];
#ifdef SDL
		sprintf(buffer, "%.3f", Time::delta);
#endif
#ifdef PRIZM
		// sprintf(buffer, "%d", (int)Time::delta);
		itoa((int)Time::delta, (unsigned char*)buffer);
#endif
		Display::drawText(0, 0, buffer, newColor(255, 255, 255));

		Display::show();
	}
}



